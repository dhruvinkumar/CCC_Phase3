#include <bits/stdc++.h>
using namespace std;

int knapSack(int v[], int w[], int n, int W, int** dp) {
   if (W < 0)
      return INT_MIN;
   if (n < 0 || W == 0)
      return 0;
   if(dp[n][W]!=-1)
      return dp[n][W];
   int in = v[n] + knapSack(v, w, n - 1, W - w[n],dp);
   int ex = knapSack(v, w, n - 1, W,dp);
   dp[n][W]=max (in, ex);
   return dp[n][W];
}

int main() {
    int t;
    cin>>t;
    while(t--){
        int n,W;
        cin>>n>>W;
        int v[n],w[n];
        for(int i=0;i<n;i++){
            cin>>w[i]>>v[i];
        }
        int** dp = new int*[n+1];
        for(int i=0;i<=n;i++)
            dp[i]=new int[W+1];
        for(int i=0;i<=n;i++)
            for(int j=0;j<=W;j++)
                dp[i][j]=-1;
        cout<< knapSack(v, w, n - 1, W,dp)<<endl;
        for(int i=0;i<=n;i++)
            delete[] dp[i];
        delete[] dp;
    }
   return 0;
}
